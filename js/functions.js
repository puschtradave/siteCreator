// Generated by CoffeeScript 1.12.4
(function() {
  App.Global = (function() {
    function Global() {}

    Global.ajaxCall = function(ptype, pdata, doAfterSuccess, addParam) {
      var ajaxData, i, k, len;
      if (typeof ptype === "undefined" || !ptype) {
        ptype = "GET";
      }
      if (typeof pdata === "undefined" || !pdata) {
        pdata = {};
      }
      if (typeof doAfterSuccess === "undefined" || !doAfterSuccess) {
        doAfterSuccess = (function() {});
      }
      if (typeof addParam === "undefined" || !addParam) {
        addParam = false;
      }
      ajaxData = {
        url: "Controller.php",
        type: ptype,
        data: pdata,
        success: function(data) {
          return doAfterSuccess(data);
        }
      };
      if (addParam) {
        for (i = 0, len = addParam.length; i < len; i++) {
          k = addParam[i];
          if (typeof addParam[k] !== "function") {
            ajaxData[k] = addParam[k];
          }
        }
      }
      return $.ajax(ajaxData);
    };

    Global.relational = function() {
      return $(".relational").each(function(index, element) {
        var $elem, cssGeneral, cssParent, cssSelf, divisor, parentAttr;
        $elem = $(element);
        divisor = $elem.data("divisor");
        cssParent = $elem.data("cssparent");
        cssSelf = $elem.data("cssself");
        cssGeneral = $elem.data("css");
        if ((cssParent == null) && (cssSelf == null)) {
          cssParent = cssSelf = cssGeneral;
        }
        parentAttr = $("#" + $elem.data("parent")).css(cssParent);
        parentAttr = parseInt(parentAttr, 10);
        return $elem.css(App.Global["return"](cssSelf), "" + parentAttr * divisor + "px");
      });
    };

    Global["return"] = function(param) {
      return param;
    };

    Global.toggleBigImageWrapper = function(bigImageWrapperList, bigImageWrapperTime) {
      var counter, i, imgListLength, randomIndex, results;
      imgListLength = bigImageWrapperList.length;
      randomIndex = (function() {
        results = [];
        for (var i = 0; 0 <= imgListLength ? i <= imgListLength : i >= imgListLength; 0 <= imgListLength ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this);
      randomIndex.sort(function() {
        return Math.random() - 0.5;
      });
      counter = 0;
      return window.setInterval((function() {
        $("#bigImageWrapper").css({
          backgroundImage: bigImageWrapperList[randomIndex[counter]]
        });
        if (counter === imgListLength) {
          counter = 0;
          return randomIndex.sort(function() {
            return Math.random() - 0.5;
          });
        } else {
          return counter += 1;
        }
      }), bigImageWrapperTime);
    };

    Global.animateSlideToLeft = function($view, childClass, $slider, $indexSmallList) {
      var $lastClone, $slides, currLeft, currSlide, dot, numberOfSlides, viewWidth;
      currSlide = 0;
      viewWidth = $view.outerWidth();
      $slides = $("." + childClass);
      numberOfSlides = $slides.length;
      currLeft = parseInt($slider.css("marginLeft"), 10);
      currSlide = Math.abs(currLeft / viewWidth);
      if ($indexSmallList != null) {
        $indexSmallList.removeClass("active");
        dot = currSlide;
        if (currSlide === numberOfSlides - 1) {
          dot = -1;
        }
        $indexSmallList.eq(dot + 1).addClass("active");
      }
      $(".lastClone").remove();
      if (currSlide === numberOfSlides - 1) {
        $lastClone = $slides.last().clone(true, true);
        $lastClone.appendTo($view).removeClass("slide").addClass("absolute lastClone");
        $slider.css({
          marginLeft: viewWidth + "px"
        });
        currLeft = viewWidth;
        console.log("last clone anim : " + -viewWidth + "px");
        $lastClone.animate({
          left: -viewWidth + "px"
        }, 1000, "easeOutQuint", {
          complete: function() {
            $lastClone.remove();
            return $(".lastClone").remove();
          }
        });
      }
      return $slider.animate({
        marginLeft: currLeft - viewWidth + "px"
      }, 1000, "easeOutQuint");
    };

    Global.slideTo = function($view, $slider, $slideTo, interval) {
      var animatingSmallRound, viewWidth;
      viewWidth = $view.outerWidth();
      clearInterval(interval);
      animatingSmallRound = true;
      return $slider.animate({
        marginLeft: $slideTo * (-viewWidth) + "px"
      }, 1000, "easeOutQuint", function() {}, animatingSmallRound = false);
    };

    Global.resizeListenerSlider = function($slider, $indexSmallList) {
      return $(window).on("resize", function() {
        console.log("resize");
        $slider.css({
          marginLeft: "0px"
        });
        $indexSmallList.removeClass("active");
        return $indexSmallList.eq(0).addClass("active");
      });
    };

    Global.createTableFromJson = function(json) {};

    return Global;

  })();

}).call(this);
