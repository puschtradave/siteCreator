// Generated by CoffeeScript 1.12.4
(function() {
  App.Index = (function() {
    function Index() {}

    $(document).ready(function() {
      return console.log("ready");
    });

    $(window).on("load", function() {
      return App.Index.Listeners();
    });

    $(window).on("resize", function() {
      return console.log("resize");
    });

    Index.Listeners = function() {
      App.Index.lookBoxes();
      App.Index.ovalCenterOnClick();
      return App.Index.ovalCenterOnMouseMove();
    };

    Index.ovalCenterOnClick = function() {
      return $(".crOvalButton").on("click", function(e) {
        var finalTriangId, id;
        id = $(this).attr("id");
        return finalTriangId = App.Index.getTriangleIdByAboveId(id, e);
      });
    };

    Index.ovalCenterOnMouseMove = function() {
      return $(".crOvalButton").on("mousemove", function(e) {
        var $finalTriang, finalTriangId, id;
        id = $(this).attr("id");
        finalTriangId = App.Index.getTriangleIdByAboveId(id, e);
        $finalTriang = $("#" + finalTriangId);
        return console.log(finalTriangId);
      });
    };

    Index.getTriangleIdByAboveId = function(id, e) {
      var $clicked, clickedHeight, clickedWidth, clickedXInElem, clickedYInElem, fX, finalTriangId, ret;
      switch (id) {
        case "crCenterLeftTopTriang":
          $clicked = $("#crCenterLeftTopTriang");
          clickedHeight = $clicked.outerHeight();
          clickedWidth = $clicked.outerWidth();
          clickedXInElem = e.pageX - $clicked.offset().left;
          clickedYInElem = ($clicked.offset().top + clickedHeight) - e.pageY;
          fX = Math.round((-clickedHeight / clickedWidth) * clickedXInElem + clickedHeight);
          ret = function() {
            if (fX - clickedYInElem > 0) {
              return "crCenterLeftTopTriang";
            }
            if (fX - clickedYInElem < 0) {
              return "crCenterTopLeftTriang";
            }
            if (fX - clickedYInElem === 0) {
              return false;
            }
          };
          finalTriangId = ret();
          break;
        case "crCenterRightTopTriang":
          $clicked = $("#crCenterRightTopTriang");
          clickedHeight = $clicked.outerHeight();
          clickedWidth = $clicked.outerWidth();
          clickedXInElem = e.pageX - $clicked.offset().left;
          clickedYInElem = ($clicked.offset().top + clickedHeight) - e.pageY;
          fX = Math.round((clickedHeight / clickedWidth) * clickedXInElem);
          ret = function() {
            if (fX - clickedYInElem > 0) {
              return "crCenterRightTopTriang";
            }
            if (fX - clickedYInElem < 0) {
              return "crCenterTopRightTriang";
            }
            if (fX - clickedYInElem === 0) {
              return false;
            }
          };
          finalTriangId = ret();
          break;
        case "crCenterLeftBottomTriang":
          $clicked = $("#crCenterLeftBottomTriang");
          clickedHeight = $clicked.outerHeight();
          clickedWidth = $clicked.outerWidth();
          clickedXInElem = e.pageX - $clicked.offset().left;
          clickedYInElem = $clicked.offset().top - e.pageY;
          fX = Math.round((clickedHeight / clickedWidth) * clickedXInElem - clickedHeight);
          ret = function() {
            if (Math.abs(fX) - Math.abs(clickedYInElem) > 0) {
              return "crCenterLeftBottomTriang";
            }
            if (Math.abs(fX) - Math.abs(clickedYInElem) < 0) {
              return "crCenterBottomLeftTriang";
            }
            if (Math.abs(fX) - Math.abs(clickedYInElem) === 0) {
              return false;
            }
          };
          finalTriangId = ret();
          break;
        case "crCenterRightBottomTriang":
          $clicked = $("#crCenterRightBottomTriang");
          clickedHeight = $clicked.outerHeight();
          clickedWidth = $clicked.outerWidth();
          clickedXInElem = e.pageX - $clicked.offset().left;
          clickedYInElem = $clicked.offset().top - e.pageY;
          fX = Math.round((-clickedHeight / clickedWidth) * clickedXInElem);
          ret = function() {
            if (Math.abs(fX) - Math.abs(clickedYInElem) > 0) {
              return "crCenterRightBottomTriang";
            }
            if (Math.abs(fX) - Math.abs(clickedYInElem) < 0) {
              return "crCenterBottomRightTriang";
            }
            if (Math.abs(fX) - Math.abs(clickedYInElem) === 0) {
              return false;
            }
          };
          finalTriangId = ret();
          break;
        case "crCenterTopLeftTriang":
          finalTriangId = "crCenterTopLeftTriang";
          break;
        case "crCenterTopRightTriang":
          finalTriangId = "crCenterTopRightTriang";
          break;
        case "crCenterBottomLeftTriang":
          finalTriangId = "crCenterBottomLeftTriang";
          break;
        case "crCenterBottomRightTriang":
          finalTriangId = "crCenterBottomRightTriang";
      }
      return finalTriangId;
    };

    Index.getNonTransparentBorder = function($elem) {
      var dir, i, len, list, parsed, retDir;
      list = ["top", "right", "bottom", "left"];
      retDir = "";
      console.dir($elem);
      for (i = 0, len = list.length; i < len; i++) {
        dir = list[i];
        console.log(dir);
        console.log($elem.css("border-" + dir + "-color"));
        parsed = parseInt(App.Index.rgb2hex($elem.css("border-" + dir + "-color"), false), 16);
        console.log(parsed);
        if (parsed !== 0 || isNaN(parsed)) {
          retDir = dir;
        }
      }
      return retDir;
    };

    Index.lookBoxes = function() {};

    Index.dragBoxes = function() {
      var $boxScroller, $lastChild, bottom, bottomStart, down, lastChHeight, startY, windowHeight;
      startY = 0;
      down = false;
      bottom = 0;
      $boxScroller = $("#crBoxScroller");
      $lastChild = $boxScroller.children().last();
      windowHeight = $(window).height();
      lastChHeight = $lastChild.height();
      bottomStart = windowHeight - (lastChHeight + $lastChild.offset().top);
      return $boxScroller.mousedown(function(e) {
        e.preventDefault();
        down = true;
        return startY = e.clientY;
      }).mousemove(function(e) {
        var mouseMoveDirection, setBottomTo;
        e.preventDefault();
        if (down) {
          mouseMoveDirection = startY - e.clientY;
          bottom = windowHeight - (lastChHeight + $lastChild.offset().top);
          setBottomTo = bottom + mouseMoveDirection;
          if (setBottomTo <= 0 && setBottomTo >= bottomStart) {
            return console.log(setBottomTo + "px");
          }
        }
      }).mouseup(function(e) {
        e.preventDefault();
        return down = false;
      });
    };

    Index["return"] = function(param) {
      return param;
    };

    Index.rgb2hex = function(rgb, withHexSign) {
      var sign, string;
      rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
      sign = "";
            if (withHexSign != null) {
        withHexSign;
      } else {
        sign = {
          "#": sign = ""
        };
      };
      if (rgb && rgb.length === 4) {
        string = sign + (rgb[1] === "255" ? "FF" : ('0' + parseInt(rgb[1], 10).toString(16)).slice(-2)) + (rgb[2] === "255" ? "FF" : ('0' + parseInt(rgb[2], 10).toString(16)).slice(-2)) + (rgb[3] === "255" ? "FF" : ('0' + parseInt(rgb[3], 10).toString(16)).slice(-2));
        return string;
      } else {
        return false;
      }
    };

    return Index;

  })();

}).call(this);
